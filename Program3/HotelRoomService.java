public class HotelRoomService<T extends Room> implements RoomService<T> {
    
    @Override
    public void clean(T room) {
        System.out.println("üßπ –£–±–∏—Ä–∞–µ–º –∫–æ–º–Ω–∞—Ç—É ‚Ññ" + room.getRoomNumber() + 
                          " (" + room.getRoomType() + ")");
        System.out.println("–ö–æ–º–Ω–∞—Ç–∞ —á–∏—Å—Ç–∞—è –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞—Å–µ–ª–µ–Ω–∏—é");
    }
    
    @Override
    public void reserve(T room) throws RoomAlreadyBookedException {
        if (room.isBooked()) {
            throw new RoomAlreadyBookedException(room.getRoomNumber());
        }
        
        room.setBooked(true);
        System.out.println("–ö–æ–º–Ω–∞—Ç–∞ ‚Ññ" + room.getRoomNumber() + 
                          " (" + room.getRoomType() + ") —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞");
        System.out.println("–°—Ç–æ–∏–º–æ—Å—Ç—å: " + room.getPricePerNight() + " —Ä—É–±/–Ω–æ—á—å");
    }
    
    @Override
    public void free(T room) {
        if (!room.isBooked()) {
            System.out.println("–ö–æ–º–Ω–∞—Ç–∞ ‚Ññ" + room.getRoomNumber() + " —É–∂–µ —Å–≤–æ–±–æ–¥–Ω–∞");
            return;
        }
        
        room.setBooked(false);
        System.out.println("–ö–æ–º–Ω–∞—Ç–∞ ‚Ññ" + room.getRoomNumber() + 
                          " (" + room.getRoomType() + ") –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞");
        System.out.println("–ö–æ–º–Ω–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
    }
}
