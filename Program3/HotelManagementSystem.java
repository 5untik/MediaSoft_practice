import java.util.*;

public class HotelManagementSystem {
    
    public static void main(String[] args) {
        System.out.println("–°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–ï–õ–ï–ú");
        System.out.println("‚ïê".repeat(50));
        
        testRoomCreation();
        
        testBasicRoomService();
        
        testLuxuryRoomService();
        
        testExceptionHandling();
        
        demonstratePolymorphism();
    }
    
    private static void testRoomCreation() {
        System.out.println("\n–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ö–û–ú–ù–ê–¢");
        System.out.println("‚îÄ".repeat(40));
        
        EconomyRoom economy = new EconomyRoom(101);
        StandardRoom standard = new StandardRoom(201);
        LuxRoom lux = new LuxRoom(301);
        UltraLuxRoom ultraLux = new UltraLuxRoom(401);
        
        List<Room> rooms = Arrays.asList(economy, standard, lux, ultraLux);
        
        System.out.println("–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:");
        rooms.forEach(System.out::println);
        
        System.out.println("\nüí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–µ–Ω:");
        for (Prices price : Prices.values()) {
            System.out.println("   " + price);
        }
    }
    
    private static void testBasicRoomService() {
        System.out.println("\nüõéÔ∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ì–û –°–ï–†–í–ò–°–ê");
        System.out.println("‚îÄ".repeat(40));
        
        HotelRoomService<Room> service = new HotelRoomService<>();
        EconomyRoom economy = new EconomyRoom(102);
        StandardRoom standard = new StandardRoom(202);
        
        try {
            System.out.println("–†–∞–±–æ—Ç–∞ —Å —ç–∫–æ–Ω–æ–º –∫–æ–º–Ω–∞—Ç–æ–π:");
            service.clean(economy);
            service.reserve(economy);
            System.out.println();
            
            System.out.println("–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π:");
            service.clean(standard);
            service.reserve(standard);
            service.free(standard);
            
        } catch (RoomAlreadyBookedException e) {
            System.err.println("–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
    
    private static void testLuxuryRoomService() {
        System.out.println("\n–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–Æ–ö–° –°–ï–†–í–ò–°–ê");
        System.out.println("‚îÄ".repeat(40));
        
        LuxuryHotelService<LuxRoom> luxService = new LuxuryHotelService<>();
        LuxRoom lux = new LuxRoom(302);
        UltraLuxRoom ultraLux = new UltraLuxRoom(402);
        
        try {
            System.out.println("–†–∞–±–æ—Ç–∞ —Å –ª—é–∫—Å –∫–æ–º–Ω–∞—Ç–æ–π:");
            luxService.clean(lux);
            luxService.reserve(lux);
            luxService.foodDelivery(lux, "–°—Ç–µ–π–∫ –í–µ–ª–ª–∏–Ω–≥—Ç–æ–Ω —Å —Ç—Ä—é—Ñ–µ–ª—è–º–∏");
            System.out.println();
            
            System.out.println("–†–∞–±–æ—Ç–∞ —Å —É–ª—å—Ç—Ä–∞ –ª—é–∫—Å –∫–æ–º–Ω–∞—Ç–æ–π:");
            luxService.clean(ultraLux);
            luxService.reserve(ultraLux);
            luxService.foodDelivery(ultraLux, "–ò–∫—Ä–∞ –±–µ–ª—É–≥–∏ —Å —à–∞–º–ø–∞–Ω—Å–∫–∏–º Dom P√©rignon");
            
        } catch (RoomAlreadyBookedException e) {
            System.err.println("–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
    
    private static void testExceptionHandling() {
        System.out.println("\n–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö");
        System.out.println("‚îÄ".repeat(40));
        
        HotelRoomService<Room> service = new HotelRoomService<>();
        EconomyRoom room = new EconomyRoom(103);
        
        try {
            service.reserve(room);
            System.out.println();
            
            System.out.println("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:");
            service.reserve(room);
            
        } catch (RoomAlreadyBookedException e) {
            System.err.println("–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
            System.err.println("–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: " + e.getRoomNumber());
        }
    }
    
    private static void demonstratePolymorphism() {
        System.out.println("\n–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ò–ú–û–†–§–ò–ó–ú–ê");
        System.out.println("‚îÄ".repeat(40));
        
        List<Room> rooms = Arrays.asList(
            new EconomyRoom(104),
            new StandardRoom(204),
            new LuxRoom(304),
            new UltraLuxRoom(404)
        );
        
        HotelRoomService<Room> service = new HotelRoomService<>();
        
        System.out.println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–Ω–∞—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–¥–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º:");
        for (Room room : rooms) {
            System.out.println("\n" + room);
            service.clean(room);
            
            try {
                service.reserve(room);
            } catch (RoomAlreadyBookedException e) {
                System.err.println(e.getMessage());
            }
        }
        
        System.out.println("\n–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –¢–ò–ü–û–í:");
        
        LuxuryHotelService<LuxRoom> luxService = new LuxuryHotelService<>();
        LuxRoom luxRoom = new LuxRoom(305);
        EconomyRoom economyRoom = new EconomyRoom(105);
        
        try {
            luxService.reserve(luxRoom);
            luxService.foodDelivery(luxRoom, "–°—É—à–∏ –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞");
            
            
        } catch (RoomAlreadyBookedException e) {
            System.err.println(e.getMessage());
        }
        
        System.out.println("\n–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
        System.out.println("–ù–µ–ª—å–∑—è –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã –≤ –Ω–µ-–ª—é–∫—Å –∫–æ–º–Ω–∞—Ç—ã");
    }
}
